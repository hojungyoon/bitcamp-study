- 학습 목표 달성 확인 목록
    - [] 서버 컴퓨터와 서버 프로그램의 관계를 이해하는가?
    서버프로그램으로부터, 요청을 받는 곳이 서버 컴퓨터이다. 서버 컴퓨터에는 사용자가 프로그램을 사용하기 위한 명령어가
    저장되어 있다.

    - [] 서버 프로그램과 데스크톱 프로그램을 구분할 수 있는가?
    서버프로그램은, 서버로부터 요청 및 응답이 가능해야 실행되는 프로그램이며, 데스크톱 프로그램은,
    서버로부터 응답 요청이 없더라도 저장 및 내용수정이 가능한 프로그램이다.

    - [] 클라이언트 프로그램이 무엇인지 이해하고 있는가?
    프로그램을 사용하기 위해 서버로부터 요청을 하고, 그에대한 응답을 받기위한 사용자 프로그램

    - [] 클라이언트/서버 구조로 된 애플리케이션의 예를 들 수 있는가?
    Micro Office
    HWP
    Alzip

    - [] git 클라이언트 프로그램을 설치할 수 있는가?
    - [] macOS 패키지 관리자 프로그램인 HomeBrew 를 설치할 수 있는가?
    - [] HomeBrew 패키지 관리자를 통해 git 프로그램을 설치할 수 있는가?
    - [] github.com에서 깃 저장소를 생성할 수 있는가?
    git 

    - [] git 서버의 저장소를 로컬로 복제할 수 있는가?
    git clone (원하는 서버의 도메인주소)

    - [] 로컬에서 작업한 파일을 로컬 깃 저장소에 백업할 수 있는가?
    git push

    - [] 로컬 깃 저장소에 백업한 내용을 깃 서버의 저장소에 업로드 할 수 있는가?
    git

    - [] 컴퓨터에서 CPU와 RAM, HDD 의 관계 및 역할을 이해하고 있는가?
    HDD는 실행하고자 하는 프로그램들의 물리저장 장치, RAM은 실행된 프로그램의 실행할 명령어를 임시저장 해두었다가
    CUP에 일부만 전달하며, CPU는 그 명령어를 연산하여 프로그램을 실행한다.

    - [] OS의 역할을 대략적으로 이해하는가?
    사용자가 cpu연산을 보다 효율적으로 사용할 수 있게 프로그램환경을 제공한다.

    - [] 명령어를 작성할 때 CPU에 맞춰서 작성해야 하고 또한 OS에 맞춰서 명령어를 구성해야 하는 이유를 설명할 수 있는가?
    os와 cpu는 서로 규격이 다르면 os는 설치가 되지 않기 때문에, 각각에 맞는 명령어를 구성해야 한다.

    - [] 명령어를 작성할 때 컴파일러의 역할은 무엇인가?
    작성된 명령어는 컴퓨터의 언어가 아니므로, 컴퓨터가 읽을 수 있는, 기계어로 변환해주는 역할을 한다.

    - [] 컴파일러가 OS와 CPU에 따라 구분되는 이유를 아는가?
    여러가지 os와 여러가지 다른 cpu가 읽을 수 있는 기계어의 방식이 다르기 때문에, 그에 맞는
    방법으로 구분되어야 한다. 그렇지 않으면 프로그램을 설치조차 할 수 없다.

    - [] 자바 컴파일러가 들어 있는 JDK를 설치할 때 OS와 CPU에 따라 구분해야 하는 이유를 아는가?
    여러가지의 os/cpu는 기계어를 읽는 각자만의 규격이 있기 때문에, 그에 맞는 jdk의 설치가 필요하다.

    - [] 자바 컴파일러와 JVM의 역할을 설명할 수 있는가?
    자바 컴파일러는 작성한 소스파일을 바이트코드로 변환해주는 역할
    JVM은 컴파일된 바이트코드를 실행하여 cpu에 명령을 전달한다.

    - [] 소스(source)와 바이트코드(bytecode)를 설명할 수 있는가?
    소스는 개발자가 프로그램을 만들고, 실행시키기(cpu에 명령)위해 작성해놓은 명령어.
    바이트코드는 컴파일러를 통해 컴파일 된 가상의 기계어이다.

    - [] 자바 컴파일러를 사용하여 소스 파일을 컴파일 할 수 있는가?
    (소스파일이 저장된 곳에서)javac 소스파일.java > (클래스파일로 변환) > java 소스파일이름

    - [] JVM을 사용하여 바이트코드를 실행할 수 있는가?
    작성된 소스파일을 자바컴파일러를 사용하여 class파일을 만들어 실행.

    - [] 컴파일 방식과 인터프리터 방식의 차이점과 장단점을 이해하는가?
    컴파일 방식은 컴파일후 .obj파일을 생성,링킹의 과정을 거쳐 .exe(실행)파일을 만들어 내어, CPU에 명령을 전달한다.
    컴파일 방식은 os와cpu에 맞춰 따로따로 수행해야 해서, os와cpu에 종속적이다. 하지만 컴파일시에 한번만 문법검사를 진행하여
    속도가 빠르다는 장점이 있다.
    인터프리터 방식은, 컴파일진행 없이, 바로 os와cpu에 명령이 전달되고, 종속적이지 않다.
    하지만 실행할때마다 매번 문법검사를 해야하므로, 실행속도는 느리다는 단점이 있다.

    - [] 자바는 하이브리드 방식으로 프로그램을 개발하고 실행한다. 하이브리드 방식을 설명할 수 있는가?
    컴파일과 인터프리터 방식 두가지를 모두 사용한다. 자바에서는 소스파일을 작성하고 나면, 먼저 컴파일을 진행해서 가상의
    기계어 파일을 만들고, 그 파일을 각 OS에 맞는 JVM을 사용하여 CPU에 명령을 전달한다.